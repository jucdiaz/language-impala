{
  "name": "Impala",
  "scopeName": "source.impala",
  "fileTypes": ["impala","sql"],
  "patterns": [
    {
      "begin": "(?i)^\\s*(((?:CREATE(?:\\s+TEMPORARY)?(?:\\s+OR\\s+REPLACE)?|DROP|ALTER|TRUNCATE)\\s+(?:EXTERNAL\\s+TABLE|TABLE|INDEX|VIEW|DATABASE|SCHEMA|FUNCTION)(?:\\s+IF(?:\\s+NOT)?\\s+EXISTS)?)\\s+(?:[a-z_][a-z0-9_]*))\\b",
      "end": "$",
      "beginCaptures": {
          "2" : { "name" : "keyword.parameter.impala"},
          "1" : { "name" : "storage.type.definition.impala"}
      },
      "patterns": [
          { "include": "$self" }
      ]
    },
    {
      "begin": "(?i)^\\s*((ADD|LIST|DELETE)\\s+(?:FILE|JAR|ARCHIVE))\\s+(.*);",
      "end": "$",
      "beginCaptures": {
          "1" : { "name" : "keyword.parameter.impala"},
          "2" : { "name" : "storage.type.value.impala"}
      },
      "patterns": [
          { "include": "$self" }
      ]
    },
    {
    	"match" : "\\b(?i:create|database|schema|if not exists|comment|location|with dbproperties|show|drop|if exists|restrict|cascade|external|table|select|distinct|partitioned (by|on)|clustered by|sorted by|asc|desc|into|buckets|skewed by|row format|stored as|stored by|with serdeproperties|tblproperties|as|like|delimited|fields terminated by|collection items terminated by|map keys terminated by|lines terminated by|serde|sequencefile|textfile|rcfile|directories|inputformat|outputformat|from|where|group by|order by|limit|load data|local|inpath|overwrite|partition|insert|directory|all|cluster by|sort by|distribute by|having|using|reduce|transform|join|inner|left|right|full|outer|semi|cross|lateral view|import|export|describe|archive|unarchive|alter|add|on|with cube|with rollup|truncate|dtrunc|DBPROPERTIES|tablesample|bucket|out of|case|when|then|end|view|jar|orc|escaped by|msck|repair|recover|partitions|replace columns|fileformat|touch|enable|disable|offline|no_drop|rename to|temporary function|index|idxproperties|WITH DEFERRED REBUILD|in table|databases|schemas|tables|extended|functions|columns|formatted|dot|set\\s+(dbproperties|location|serde|(owner(\\s+(user|role))?))|rebuild|union|percent|rows|else|over|by|unbounded|preceding|current row|following|window|explain|dependency|to|analyze|compute statistics|compute stats|locks|role|grant|revoke|user|group|change|serdeproperties|null defined as|lock|unlock|use|exclusive|delete|column|grouping sets|with|compact|first|after|file|grant|option|update|show_database|privileges|current_database|effective_user|pid|version|partition by|range)\\b",
    	"name" : "keyword.control.impala"
    },
    {
      "match" : "(--).*$\\n?",
      "name" : "comment.line.double-slash.asciidoc"
    },
    {
        "begin": "/\\*",
        "end": "\\*/",
        "name": "comment.block.impala"
    },
    {
      "match" : "\\b(?i:tinyint|smallint|int|bigint|float|double|decimal|timestamp|date|boolean|string|varchar|char|binary)\\b",
      "name" : "storage.type.impala"
    },
    {
      "match" : "\\b(?i:struct|map|array|uniontype)\\b",
      "name" : "support.type.impala"
    },
    {
      "match" : "\\b(?i:null|true|false|INPUT__FILE__NAME|BLOCK__OFFSET__INSIDE__FILE)\\b",
      "name" : "constant.language.impala"
    },
    {
      "match" : "\\b\\d+\\b",
      "name" : "constant.numeric.impala"
    },
    {
      "match" : "'\\\\\\d+'",
      "name" : "constant.numeric.impala"
    },
    {
      "begin": "\"",
      "end": "\"",
      "name": "string.quoted.double.impala",
      "patterns": [
        {
          "match": "\\\\.",
          "name": "constant.character.escape.impala"
        }
      ]
    },
    {
      "begin": "'",
      "end": "'",
      "name": "string.quoted.single.impala",
      "patterns": [
        {
          "match": "\\\\.",
          "name": "constant.character.escape.impala"
        }
      ]
    },
    {
      "name": "keyword.operator.arithmetic.impala",
      "match": "\\b(\\+|\\-|\\*|\\/|\\%|&|\\|\\^|~)\\b"
    },
    {
      "name" : "keyword.operator.relational.impala",
      "match" : "(?i:=|<=>|==|<>|<|<=|>|>=|!=|(\\b(between|is|like|rlike|regexp)\\b))"
    },
    {
      "name" : "keyword.operator.logical.impala",
      "match" : "(?i)\\b(and|&&|or|not|\\|\\||!|(not\\s+)?in|(not\\s+)?exists)\\b"
    },
    {
      "name" : "support.function.udf.complex.impala",
      "match" : "\\b(map|struct|named_struct|array|create_union)\\b"
    },
    {
      "name" : "support.function.udf.mathematic.impala",
      "match" : "\\b(?i:round|floor|dfloor|fmod|mod|is_inf|is_nan|fnv_hash|ceil|ceiling|dceil|rand|factorial|exp|dexp|ln|log|log10|log2|pow|power|dpow|fpow|precision|quotient|sqrt|bin|hex|unhex|conv|abs|pmod|sin|asin|cos|cot|cosh|acos|tan|atan|atan2|degrees|radians|positive|negative|sign|e|round|dround|scale|sinh|tanh|pi|bitand|bitnot|bitor|bitxor|countset|getbit|rotateleft|rotateright|setbit|shiftleft|shiftright)\\b"
    },
        {
      "name" : "support.function.udf.collection.impala",
      "match" : "\\b(?i:size|map_keys|map_values|array_contains|sort_array)\\b"
    },
        {
      "name" : "support.function.udf.type-cast.impala",
      "match" : "\\b(?i:binary|cast)\\b"
    },
    {
      "name" : "support.function.udf.date.impala",
      "match" : "\\b(?i:from_unixtime|unix_timestamp|to_date|year|month|day|dayofmonth|hour|minute|second|weekofyear|datediff|date_add|date_sub|from_utc_timestamp|to_utc_timestamp|add_months|adddate|current_timestamp|date_part|dayname|interval|dayofweek|dayofyear|days_add|days_sub|extract|from_timestamp|hours_add|hours_sub|int_months_between|microseconds_add|microseconds_sub|milliseconds_add|milliseconds_sub|minutes_add|minutes_sub|months_add|months_between|months_sub|nanoseconds_add|nanoseconds_sub|now|seconds_add|subdate|timeofday|timestamp_cmp|to_timestamp|trunc|weeks_add|weeks_sub|years_add|years_sub)\\b"
    },
    {
      "name" : "support.function.udf.conditional.impala",
      "match" : "\\b(?i:if|coalesce)\\b"
    },
    {
      "name" : "support.function.udf.string.impala",
      "match" : "\\b(?i:ascii|base64|concat|typeof|context_ngrams|concat_ws|decode|encode|find_in_set|format_number|get_json_object|in_file|instr|length|locate|lower|lcase|lpad|ltrim|ngrams|parse_url|printf|regexp_extract|regexp_replace|repeat|reverse|rpad|rtrim|sentences|space|split|str_to_map|substr|substring|translate|trim|unbase64|upper|ucase|ascii|btrim|char_length|character_length|chr|initcap|regexp_like|split_part|strleft|strright)\\b"
    },
    {
      "name" : "support.function.udf.misc.impala",
      "match" : "\\b(?i:java_method|reflect|hash|xpath|xpath_short|xpath_int|xpath_long|xpath_float|xpath_double|xpath_number|xpath_string|get_json_object)\\b"
    },
    {
      "match" : "\\b(?i:count|sum|avg|min|max|max_int|max_tinyint|max_smallint|max_bigint|min_int|min_tinyint|min_smallint|min_bigint|ifnull|greatest|least|variance|var_pop|var_samp|stddev_pop|stddev_samp|covar_pop|covar_samp|corr|percentile|percentile_approx|histogram_numeric|collect_set|collect_list|ntile|lead|lag|first_value|last_value|rank|row_number|dense_rank|cume_dist|percent_rank|if|isfalse|isnotfalse|isnottrue|isnull|istrue|nonnullvalue|nullif|nullifzero|nullvalue|nvl|zeroifnull|appx_median|group_concat|ndv|stddev|variance_samp|variance_pop)\\b",
      "name" : "support.function.udaf.impala"
    },
    {
      "name" : "support.function.udtf.impala",
      "match" : "\\b(?i:inline|explode|json_tuple|parse_url_tuple|stack|posexplode)\\b"
    },
    {
      "begin": "(?i)^\\s*((?:set)\\s+(?:[^\\=]+))\\s*=\\s*",
      "end": ";?$",
      "beginCaptures": {
        "2" : { "name" : "keyword.parameter.impala"},
        "1" : { "name" : "storage.type.parameter.impala"}
      },
      "patterns": [
        { "include": "$self" }
      ]
    }
  ],
  "uuid": "a4023757-1f16-4e02-b349-d1673b8626b8"
}
